import{_ as t,c as a,a0 as n,o as i}from"./chunks/framework.CGHvQLJz.js";const c=JSON.parse('{"title":"Panduan untuk End to End (E2E) Automation Test Developer","description":"","frontmatter":{},"headers":[],"relativePath":"guide/e2e-automate-test.md","filePath":"guide/e2e-automate-test.md"}'),o={name:"guide/e2e-automate-test.md"};function s(r,e,l,m,u,d){return i(),a("div",null,e[0]||(e[0]=[n('<h1 id="panduan-untuk-end-to-end-e2e-automation-test-developer" tabindex="-1"><img src="https://emojis.slackmojis.com/emojis/images/1588315024/8823/hyperkitty.gif?1588315024" width="30"> Panduan untuk <em>End to End (E2E) Automation Test Developer</em> <a class="header-anchor" href="#panduan-untuk-end-to-end-e2e-automation-test-developer" aria-label="Permalink to &quot;&lt;img src=&quot;https://emojis.slackmojis.com/emojis/images/1588315024/8823/hyperkitty.gif?1588315024&quot; width=&quot;30&quot; /&gt; Panduan untuk *End to End (E2E) Automation Test Developer*&quot;">​</a></h1><p><a href="./en-README.html">Back to Home</a></p><p>This section contains guidelines for creating code, using <em>third party tools</em>, an explanation of the flow or architecture and libraries that exist and/or are used in creating <em>end to end automation tests</em> on the Arch Public Website Dev.</p><hr><hr><h2 id="e2e-automation-test-standard-flow-and-architecture-for-creating-e2e-automation-tests" tabindex="-1">E2E Automation Test: Standard flow and architecture for creating <em>e2e automation tests</em> <a class="header-anchor" href="#e2e-automation-test-standard-flow-and-architecture-for-creating-e2e-automation-tests" aria-label="Permalink to &quot;E2E Automation Test: Standard flow and architecture for creating *e2e automation tests*&quot;">​</a></h2><p><em>End to end (e2e) testing</em> is a testing technique to ensure that the system runs according to a predetermined path from start to finish on the Arch Public Website Dev. <em>E2E Testing</em> has four main flows divided into planning, designing, implementing and analyzing results.</p><p><img src="https://i.imgur.com/98gApwl.png" alt=""></p><h3 id="planning" tabindex="-1">Planning <a class="header-anchor" href="#planning" aria-label="Permalink to &quot;Planning&quot;">​</a></h3><p>Planning is the flow stage of determining and dividing tasks, schedules and resources that will be used to test the system/module/feature/update/improvement that will be carried out.</p><p><strong>Enter</strong>: PRD documents, SRS, and other forms of documentation that can explain the system/module/feature/update/improvement that will be carried out.</p><p><strong>Output</strong>: <strong>Ora Story/Bug Card</strong> (<em>Description, figma, &amp; acceptance criteria included</em>)</p><h3 id="planning-1" tabindex="-1">Planning <a class="header-anchor" href="#planning-1" aria-label="Permalink to &quot;Planning&quot;">​</a></h3><p>Design is the flow stage of determining test specifications, creating test cases (<em>test cases</em>), risk analysis, usage analysis, and testing scheduling for each story/bug card Ora that has been determined.</p><p><strong>Enter</strong>: <strong>Ora Story/Bug Card</strong> (<em>Description, figma, &amp; acceptance criteria included</em>)</p><p><strong>Output</strong>: <strong>Test Plan</strong> (<em>includes test cases</em>)</p><h3 id="application" tabindex="-1">Application <a class="header-anchor" href="#application" aria-label="Permalink to &quot;Application&quot;">​</a></h3><p>Implementation is the flow stage for executing <em>test cases</em> that have been designed and planned in the <em>test plan</em>, conducting demos and documenting the results.</p><p><strong>Enter</strong>: <strong>Test Plan</strong> (<em>includes test cases</em>)</p><p><strong>Output</strong>: <strong>Test Plan Progress Report</strong> and demo feedback list</p><h3 id="results-analysis" tabindex="-1">Results Analysis <a class="header-anchor" href="#results-analysis" aria-label="Permalink to &quot;Results Analysis&quot;">​</a></h3><p>Results analysis is a flow stage for analyzing test results, evaluating tests, carrying out additional testing if necessary, issuing <em>release notes</em> and tidying up the <em>test plan</em> document for the next development or maintenance (iteration).</p><p><strong>Enter</strong>: <strong>Test Plan Progress Report</strong> and demo feedback list</p><p><strong>Output</strong>: <strong>Release Notes</strong> and <em>evaluation report</em></p><hr><p>The implementation of <em>e2e testing</em> technically applies both <em>functional</em> and <em>non-functional</em> approaches. Each approach has a list of recommended techniques/tests that can be used to meet service requirements.</p><h3 id="functional" tabindex="-1">Functional <a class="header-anchor" href="#functional" aria-label="Permalink to &quot;Functional&quot;">​</a></h3><p>Engineering/testing list:</p><ul><li>Unit testing</li><li>Integration tests</li><li>Smoke testing</li><li>Sanity testing</li><li>Regression testing</li><li>Exploratory testing</li><li>User acceptance testing</li></ul><h3 id="not-functional" tabindex="-1">Not Functional <a class="header-anchor" href="#not-functional" aria-label="Permalink to &quot;Not Functional&quot;">​</a></h3><p>Engineering/testing list:</p><ul><li>Load testing</li><li>Performance testing</li><li>Stress test</li><li>Security testing</li><li>Accessibility testing</li></ul><p>To get maximum <em>test coverage</em> it is recommended to apply all the techniques listed above in every (iteration) of development haha ​​:D.</p><hr><p>The implementation of <em>e2e test</em> in its execution applies a <em>manual</em> and <em>automation</em> approach sequentially. Before implementing an <em>automation</em> approach, developers are expected to ensure that every component in the <em>manual</em> approach has been implemented, completed, or agreed upon.</p><h3 id="instruction" tabindex="-1">Instruction <a class="header-anchor" href="#instruction" aria-label="Permalink to &quot;Instruction&quot;">​</a></h3><p>Components of a <em>manual</em> approach that need to be implemented and ensure that the approach exists or is agreed upon:</p><ul><li>Test Driven Development/Test Planning</li><li>Test Cases and Scenarios</li><li>Reporting</li><li>Compatibility</li><li>Verification and Validation</li></ul><h3 id="automation" tabindex="-1">Automation <a class="header-anchor" href="#automation" aria-label="Permalink to &quot;Automation&quot;">​</a></h3><p>Components of an <em>automation</em> approach that need to be implemented:</p><ul><li>Backend Automation</li><li>Front End Automation</li><li>Mobile Automation (if required)</li></ul><p>Each <em>platform</em> on the Arch Public Website has different needs and system base/<em>tools</em> so by default the implementation of <em>e2e testing</em> will be more detailed in the guide which has been divided by <em>platform</em>.</p><hr><hr><h2 id="e2e-at-tools-daftar-tools-yang-digunakan-untuk-pengembangan" tabindex="-1">E2E AT Tools : Daftar <em>tools</em> yang digunakan untuk pengembangan <a class="header-anchor" href="#e2e-at-tools-daftar-tools-yang-digunakan-untuk-pengembangan" aria-label="Permalink to &quot;E2E AT Tools : Daftar *tools* yang digunakan untuk pengembangan&quot;">​</a></h2><ul><li><em><a href="https://codecept.io/" target="_blank" rel="noreferrer">CodeceptJS</a></em> (Backend/Frontend Automation)</li><li><em><a href="https://monika.hyperjump.tech/" target="_blank" rel="noreferrer">Monika</a></em> (Monitoring/Trigger)</li><li><em><a href="https://betterstack.com/better-uptime" target="_blank" rel="noreferrer">BetterUptime</a></em> (Monitoring)</li><li><em><a href="https://testproject.io/" target="_blank" rel="noreferrer">TestProjectIO</a></em> (E2E Automation)</li></ul><hr><hr>',48)]))}const h=t(o,[["render",s]]);export{c as __pageData,h as default};
