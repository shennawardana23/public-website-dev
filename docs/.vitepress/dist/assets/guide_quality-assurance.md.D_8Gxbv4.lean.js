import{_ as t,c as a,a0 as i,o as s}from"./chunks/framework.CGHvQLJz.js";const d=JSON.parse('{"title":"Guidelines in Quality Assurance","description":"","frontmatter":{},"headers":[],"relativePath":"guide/quality-assurance.md","filePath":"guide/quality-assurance.md"}'),m={name:"guide/quality-assurance.md"};function r(l,e,o,n,u,h){return s(),a("div",null,e[0]||(e[0]=[i('<h1 id="guidelines-in-quality-assurance" tabindex="-1"><img src="https://media.giphy.com/media/WUlplcMpOCEmTGBtBW/giphy.gif" width="40"> Guidelines in Quality Assurance <a class="header-anchor" href="#guidelines-in-quality-assurance" aria-label="Permalink to &quot;&lt;img src=&quot;https://media.giphy.com/media/WUlplcMpOCEmTGBtBW/giphy.gif&quot; width=&quot;40&quot;&gt; Guidelines in Quality Assurance&quot;">​</a></h1><p><a href="./en-README.html">Back to Home</a></p><p>This section contains guidelines for conducting testing well, descriptions of documents, processes and agreements that apply to the Arch Public Website Dev.</p><hr><h3 id="quality-assurance-workflow" tabindex="-1"><em>Quality Assurance Workflow</em> <a class="header-anchor" href="#quality-assurance-workflow" aria-label="Permalink to &quot;*Quality Assurance Workflow*&quot;">​</a></h3><p>The current <em>Quality Assurance</em> flow is as follows:</p><ol><li>Create a test document for each <em>user story</em> in the related sprint</li><li>Conduct PR Review and ensure the system built is in accordance with <em>acceptance criteria</em></li><li>Build <em>E2E Automation Test</em> for every <em>user story</em> that has been entered into the <em>prod server</em></li><li>Conduct Demo/UAT for each <em>user story</em> during <em>sprint review</em></li><li>Create <em>Release Notes</em> for each <em>user story</em> / <em>bugfix</em> when releasing to the <em>production server</em></li></ol><hr><h3 id="document-test" tabindex="-1">Document Test <a class="header-anchor" href="#document-test" aria-label="Permalink to &quot;Document Test&quot;">​</a></h3><p>Document Test are created using <em>Google Doc - Test Plan</em>. Several things that need to be considered when creating test documents are:</p><ul><li>Make sure every <em>sprint</em> has 1 <em>test plan</em>. Each <em>test plan</em> will contain as many <em>test suites</em> as there are <em>user stories</em> in the related <em>sprint</em>. Each <em>test suite</em> will contain several <em>test cases</em> based on <em>acceptance criteria</em> and scenarios needed to address various conditions.</li><li>Make sure the scenario created covers all conditions, including <em>positive case</em>, <em>negative case</em>, <em>corner case</em>. It would be better to consider one or more of the following <em>testing</em> techniques <em>Boundary Value Analysis</em>, <em>Equivalence Partitioning</em>, <em>Decision Table</em>, <em>State Transition Diagram</em>, or <em>Error Guessing</em></li></ul><hr><h3 id="manual-test" tabindex="-1"><em>Manual Test</em> <a class="header-anchor" href="#manual-test" aria-label="Permalink to &quot;*Manual Test*&quot;">​</a></h3><p>Manual tests are carried out based on the test document for the <em>testing</em> step by step guide. Manual tests are carried out by the developer after carrying out a <em>Pull Request</em> and then confirmed by QA. Once confirmed, <em>Pull Request</em> will <em>merge</em> to the <em>staging server</em>. and QA will start to build <em>E2E Automation Test</em> on <em>staging server</em></p><p>Before the <em>sprint</em> ends, QA will ensure that all work completed meets the conditions stated in the test document</p><hr><h3 id="e2e-automation-test" tabindex="-1"><em>E2E Automation Test</em> <a class="header-anchor" href="#e2e-automation-test" aria-label="Permalink to &quot;*E2E Automation Test*&quot;">​</a></h3><p><em>E2E Automation Test</em> was built using the <em><a href="https://codecept.io/" target="_blank" rel="noreferrer">CodeceptJS</a></em> framework. Several things that need to be considered when creating an <em>E2E Automation Test</em> are:</p><ul><li>Make sure the <em>E2E Automation Test</em> that is built uses the <em>Behaviour Driven Development</em> format with <em>Gherkin Syntax</em></li><li>Ensure <em>E2E Automation Test</em> is built based on test documents and can be run repeatedly</li><li>Before running <em>E2E Automation Test</em>, make sure the required data is available, if necessary, create <em>dummy</em> data first</li><li>Apart from being based on test documents (per <em>sprint</em>), it is recommended to build <em>E2E Automation Tests</em> per module as well to make it easier to carry out <em>regression tests</em></li></ul><hr><h3 id="bug-report-procedure" tabindex="-1"><em>Bug Report Procedure</em> <a class="header-anchor" href="#bug-report-procedure" aria-label="Permalink to &quot;*Bug Report Procedure*&quot;">​</a></h3><p>Ketika tim QA menemukan bugs atau ada yang harus diimprove di dalam aplikasi, ada <em>standar report</em> yang harus diperhatikan:</p><p><em>BUG</em></p><ul><li><em>Severity</em> : berisi level tingkatan resiko atau seberapa pengaruh bugs terhadap sistem</li><li><em>Priority</em> : berisi level prioritas bug untuk diperbaiki</li><li><em>Steps to Reproduce</em> : berisi step by step bagaimana mendapatkan bugs tersebut.</li><li><em>Actual Result</em> : berisi output dari step yang dijalankan.</li><li><em>Expected Result</em> : berisi output yang semestinya (yang benar)</li><li><em>Extra Information</em> : bisa berupa <em>screenshot</em> atau <em>credential</em> yang digunakan untuk testing</li></ul><p><em>IMPROVEMENT</em></p><ul><li><em>What to improve</em> : bagian apa saja yang harus di improve</li><li><em>How to improve</em> : menjelaskan bagaimana itu harus di improve</li></ul><hr><h3 id="review-pr-pull-request-flow" tabindex="-1"><em>Review PR (Pull Request) Flow</em> <a class="header-anchor" href="#review-pr-pull-request-flow" aria-label="Permalink to &quot;*Review PR (Pull Request) Flow*&quot;">​</a></h3><p>The role of the <em>Quality Assurance</em> team in <em>Pull Request</em> is to review new features or bugfixes as they should before merging them into develop or master. Several things that need to be considered in this <em>Pull Request</em> are:</p><ul><li>Make sure there is no <em>Conflict</em> in the <em>Pull Request</em>. If there is a <em>Conflict</em>, notify the relevant developer to immediately resolve the <em>Conflict</em>.</li><li>Pipeline <em>Passed</em> (applies to all <em>Pull Requests</em>).</li><li>If the pipeline <em>Failed</em> because of the <em>API test script</em>, check the <em>test script</em> again to see if it is still relevant or needs to be <em>updated</em></li><li>When using <em>Server Latest</em> for <em>testing pull requests</em>, make sure the relevant branch is at the top</li><li><em>Pull Request</em> can only be merged by the QA team after getting <em>Approval</em> from the assigned <em>QA</em> and <em>Captain</em> from the dev team appointed for <em>code review</em></li><li>When <em>merging</em> branches, make sure to check the <em>Close Source Branch</em> section</li></ul><p>The <em>QA</em> team also has the right to carry out a <em>Decline Pull Request</em> with the following conditions:</p><ul><li>There are no <em>File Changes</em> in <em>Pull Request</em> (<em>File Changes 0</em>).</li><li><em>Duplicate Files</em>. If there are 2 PRs containing the same <em>file changes</em>, then one can be <em>Declined</em>. And make sure that there is an explanation of which <em>pull request</em> in <em>decline</em> is related to or the same as which <em>pull request</em>.</li><li>The number of <em>file changes</em> is too large. There are provisions for a maximum number of <em>file changes</em> in 1 <em>Pull Request</em>.</li></ul><ul><li>There is no <em>description</em> in <em>pull request</em>. At a minimum there must be a <em>Commit message</em></li><li>Before <em>decline</em>, communicate first with the developer concerned.</li></ul><hr><h3 id="release-notes" tabindex="-1"><em>Release Notes</em> <a class="header-anchor" href="#release-notes" aria-label="Permalink to &quot;*Release Notes*&quot;">​</a></h3><p><em>Release Notes</em> are created using <em><a href="./release-notes-VnZ2Q4m4iC.html">Docs Release Notes</a></em>. Several things that need to be considered when making <em>Release Notes</em> are:</p><ul><li>Naming the title of <em>Release Notes</em> uses the format <strong>[Platform Name] - Release [Release Date] (Version [Platform Version])</strong>. For example: <strong>CMS PBS - Release 1 July 2024 (Version 1.16.0)</strong></li><li>The outline of <em>Release Notes</em> is as follows:</li><li>[H1] What&#39;s new? <ul><li>[H2] Module - Features 1</li></ul></li><li>[H2] What changed? <ul><li>[H1] <em>Improvements</em><ul><li>[H2] <em>Improvements</em> Module 1 - Description <em>Improvements</em></li></ul></li><li>[H2] <em>Fixes</em><ul><li>[H1] <em>Fixes</em> Module 1 - Description <em>Fixes</em></li></ul></li></ul></li><li>Make sure to add <em>screenshot</em> images or gifs to explain the steps to run new features or other <em>improvements</em> features</li><li>After the <em>Release Notes</em> have been created, make sure to provide information to the relevant <em>stakeholders</em> or share the <em>Release Notes</em> document via the Arch Public Website Dev <em>Google Chat Space</em> in the <em>Release Notes</em> thread</li></ul><hr>',38)]))}const p=t(m,[["render",r]]);export{d as __pageData,p as default};
